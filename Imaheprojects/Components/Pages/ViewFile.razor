@page "/viewfile"

@using System.Text.Json
@inject HttpClient Http

<div class="viewfile-container">
    <h2 class="viewfile-title">Sorted Images</h2>
    @if (isLoading)
    {
        <div class="viewfile-loading">Loading images...</div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        @foreach (var group in new[] { "good", "bad", "duplicate" })
        {
            if (files.TryGetValue(group, out var list) && list.Count > 0)
            {
                <div class="viewfile-section">
                    <h3 class="viewfile-section-title">@Capitalize(group) Images (@list.Count)</h3>
                    <div class="viewfile-horizontal-gallery">
                        @foreach (var file in list)
                        {
                            <div class="viewfile-hcard @(group)">
                                <div class="viewfile-hcard-imgwrap">
                                    <img src="@GetFullImageUrl(file.Url)" alt="@file.Filename" />
                                </div>
                                <div class="viewfile-hcard-info">
                                    <div class="viewfile-hcard-filename">@file.Filename</div>
                                    <div class="viewfile-hcard-meta">Sharpness: <b>@file.Sharpness:F1</b></div>
                                    <div class="viewfile-hcard-meta">Exposure: <b>@file.Exposure:F1</b></div>
                                    @if (!string.IsNullOrEmpty(file.Reason))
                                    {
                                        <div class="viewfile-hcard-reason">Reason: <span>@file.Reason</span></div>
                                    }
                                    <a href="@GetFullImageUrl(file.Url)" download="@file.Filename" class="viewfile-download-btn">
                                        ⬇️ Download
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private bool isLoading = true;
    private string errorMessage = "";
    private Dictionary<string, List<ImageFile>> files = new();

    private string GetFullImageUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url)) return "";
        if (url.StartsWith("http")) return url;
        return $"http://localhost:8000{url}";
    }

    private string Capitalize(string s) => string.IsNullOrEmpty(s) ? s : char.ToUpper(s[0]) + s.Substring(1);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            var response = await Http.GetAsync("http://localhost:8000/images/organized/");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var doc = JsonDocument.Parse(json);
                files = new Dictionary<string, List<ImageFile>>();
                foreach (var group in new[] { "good", "bad", "duplicate" })
                {
                    if (doc.RootElement.TryGetProperty(group, out var arr) && arr.ValueKind == JsonValueKind.Array)
                    {
                        var list = new List<ImageFile>();
                        foreach (var item in arr.EnumerateArray())
                        {
                            var file = new ImageFile
                            {
                                Filename = item.GetProperty("filename").GetString() ?? "",
                                Url = item.TryGetProperty("url", out var u) ? u.GetString() ?? "" : "",
                                Sharpness = item.TryGetProperty("sharpness", out var s) ? s.GetDouble() : 0,
                                Exposure = item.TryGetProperty("exposure", out var e) ? e.GetDouble() : 0,
                                Reason = item.TryGetProperty("reason", out var r) ? r.GetString() : null
                            };
                            list.Add(file);
                        }
                        files[group] = list;
                    }
                }
            }
            else
            {
                errorMessage = $"Failed to fetch files: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class ImageFile
    {
        public string Filename { get; set; } = "";
        public string Url { get; set; } = "";
        public double Sharpness { get; set; }
        public double Exposure { get; set; }
        public string? Reason { get; set; }
    }
} 